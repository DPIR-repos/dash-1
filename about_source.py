import streamlit as st
from pathlib import Path
import os
import sys

def resource_path(file_path, local_folder_name=None):
    """
    Busca un archivo en m√∫ltiples ubicaciones, incluyendo rutas con '_internal'.
    Compatible con PyInstaller en modos OneFile y OneDirectory.
    
    Args:
        file_path (str/Path): Ruta original del archivo
        local_folder_name (str, opcional): Nombre del directorio base donde buscar.
                                          Si None, se determina autom√°ticamente.
    
    Returns:
        Path: Ruta del archivo encontrado o la original si no se encontr√≥
    """
    # Convertir a Path si es necesario
    path_obj = Path(file_path) if isinstance(file_path, str) else file_path
    
    # 1. Intentar con la ruta original primero
    if path_obj.exists():
        return path_obj
    
    # 2. Determinar el directorio base seg√∫n el modo de empaquetado
    if getattr(sys, 'frozen', False):
        # Aplicaci√≥n empaquetada
        if '_MEIPASS' in os.environ:
            # Modo OneFile - los recursos est√°n en _MEIPASS
            base_dir = Path(os.environ['_MEIPASS'])
        else:
            # Modo OneDirectory - usar directorio del ejecutable
            base_dir = Path(sys.executable).parent
    else:
        # Modo desarrollo - usar directorio del script
        base_dir = Path(__file__).parent
    
    # 3. Si se especific√≥ un local_folder_name, usarlo como referencia
    if local_folder_name:
        parts = list(path_obj.parts)
        try:
            base_index = parts.index(local_folder_name)
            base_parts = parts[:base_index+1]
            remaining_parts = parts[base_index+1:]
            new_parts = base_parts + ['_internal'] + remaining_parts
            new_path = Path(*new_parts)
            if new_path.exists():
                return new_path
        except ValueError:
            pass  # Continuar con la l√≥gica normal si no se encuentra el folder
    
    # 4. Intentar rutas alternativas (versi√≥n corregida)
    possible_paths = []
    
    # Ruta directa desde el directorio base
    possible_paths.append(base_dir / path_obj.name)
    
    # Ruta manteniendo estructura pero desde base_dir
    if not path_obj.is_absolute():
        possible_paths.append(base_dir / path_obj)
    else:
        possible_paths.append(path_obj)
    
    # Ruta con _internal (versi√≥n simplificada para evitar errores de sintaxis)
    if not path_obj.is_absolute():
        possible_paths.append(base_dir / '_internal' / path_obj)
    else:
        try:
            base_index = path_obj.parts.index(base_dir.name)
            new_parts = (path_obj.parts[:base_index+1] + ('_internal',) + 
                        path_obj.parts[base_index+1:])
            possible_paths.append(Path(*new_parts))
        except ValueError:
            pass
    
    # Ruta temporal de OneFile (si aplica)
    if getattr(sys, 'frozen', False) and '_MEIPASS' in os.environ:
        possible_paths.append(base_dir / '_internal' / path_obj.name)
    
    # Filtrar paths v√°lidos y verificar existencia
    for test_path in possible_paths:
        try:
            if test_path.exists():
                return test_path
        except (TypeError, AttributeError):
            continue
    
    # 5. Como √∫ltimo recurso, intentar con el directorio de trabajo actual
    test_path = Path.cwd() / path_obj if not path_obj.is_absolute() else path_obj
    if test_path.exists():
        return test_path
    
    # Si no se encontr√≥ en ninguna ruta, devolver la original
    return path_obj

def show():
    # Logo del INE
    st.sidebar.markdown(
        """
        <div style="text-align: center;">
            <img src="https://www.ine.gob.gt/ine/wp-content/uploads/2017/09/cropped-INE.png" width="150">
        </div>
        """,
        unsafe_allow_html=True
    )
    
    current_folder = Path(os.getcwd())
    soruce_folder = "source_data"
    st.sidebar.markdown(" ")
    st.sidebar.image(resource_path(current_folder/soruce_folder/"DPIR_logo_2.png"))
    
    # Tabla de contenido en el sidebar
    st.sidebar.markdown("## Tabla de Contenido")
    st.sidebar.markdown("""
    - [Acerca del Observatorio de Precios](#acerca-del-observatorio-de-precios)
    - [Funcionalidades principales](#funcionalidades-principales)
    - [Metodolog√≠a](#metodolog√≠a)
    - [Detalles t√©cnicos](#detalles-t√©cnicos-de-los-gr√°ficos)
    - [C√≥mo usar la aplicaci√≥n](#c√≥mo-usar-la-aplicaci√≥n)
    """)
    
    st.title("üìö Documentaci√≥n T√©cnica")
    
    st.markdown("""
    <a id="acerca-del-observatorio-de-precios"></a>
    ## Acerca del Observatorio de Precios
    
    Esta aplicaci√≥n permite analizar los precios de insumos adjudicados en Guatecompras,
    con ajustes por inflaci√≥n y visualizaciones interactivas.
    """, unsafe_allow_html=True)
    
    st.markdown("""
    <a id="funcionalidades-principales"></a>
    ### Funcionalidades principales:
    - An√°lisis de precios por insumo y variedad
    - Correcci√≥n por inflaci√≥n (nacional/regional)
    - Visualizaciones geogr√°ficas por departamento
    - Series temporales de evoluci√≥n de precios
    """, unsafe_allow_html=True)
    
    st.markdown("""
    <a id="metodolog√≠a"></a>
    ### Metodolog√≠a:
    Los precios se calculan usando la media geom√©trica ponderada por cantidad ofertada,
    con intervalos de confianza ajustables.
    """, unsafe_allow_html=True)
    
    with st.expander("üìä Detalles t√©cnicos de los gr√°ficos"):
        st.markdown("""
        <a id="detalles-t√©cnicos-de-los-gr√°ficos"></a>
        - **Histogramas**: Muestran distribuci√≥n de precios con KDE (Kernel Density Estimation). El n√∫mero de bins para el histograma se determina
                           siguiendo la regla de Sturges, cuya f√≥rmula matematica es $$N_{bins}=1+log_{2}(M)$$ donde $$M$$ es el n√∫mero total de observaciones. 
                           En este caso el n√∫mero total de observaciones es igual a la suma del n√∫mero total de unidades ofertadas.  
        - **Mapas**: Coropleticos por departamento con precios promedio
        - **Series temporales**: Evoluci√≥n mensual con bandas de desviaci√≥n est√°ndar
        """, unsafe_allow_html=True)
    
    with st.expander("üõ†Ô∏è C√≥mo usar la aplicaci√≥n"):
        st.markdown("""
        <a id="c√≥mo-usar-la-aplicaci√≥n"></a>
        1. Seleccione el a√±o de inter√©s en el sidebar
        2. Elija el c√≥digo de insumo (puede buscar por c√≥digo o descripci√≥n)
        3. Filtre por variedad si es necesario
        4. Active correcci√≥n por inflaci√≥n si lo requiere
        5. Explore los gr√°ficos y tablas generadas
        """, unsafe_allow_html=True)
        
    col1Logo, col2Logo = st.columns([9, 1])

    with col2Logo:
        st.markdown("")
        st.markdown("")
        st.markdown("")
        st.image(resource_path(current_folder / soruce_folder / "DPIR_logo_2.png"), width=120)

# Llamada a la funci√≥n principal
show()